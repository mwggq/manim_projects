from manim import *

config.pixel_width = 1080
config.pixel_height = 1920
config.frame_rate = 60
config.disable_caching = True

class DerivativeSine(Scene):
    def construct(self):
        title = Text("Derivative of sin(x)", font="Bahnschrift").scale(0.9)
        title.set_color_by_gradient(BLUE, PURPLE)
        title.stroke_width = 1.2
        self.play(GrowFromCenter(title), run_time=1)
        self.play(title.animate.move_to(UP * 7))

        top_axes = Axes(
            x_range=[-2 * PI, 2 * PI, PI],
            y_range=[-1.5, 1.5, 1],
            tips=False,
            axis_config={"stroke_width": 4},
        ).scale(0.9).next_to(title, DOWN * 4)

        top_axes.get_x_axis().add_labels({
            -2*PI: MathTex(r"-2\pi").set_stroke(width=1.2),
            2*PI: MathTex(r"2\pi").set_stroke(width=1.2),
        })
        top_axes.get_y_axis().add_labels({
            -1: MathTex("-1").set_stroke(width=1.2),
            0: MathTex("0").set_stroke(width=1.2),
            1: MathTex("1").set_stroke(width=1.2),
        })

        bottom_axes = Axes(
            x_range=[-2 * PI, 2 * PI, PI],
            y_range=[-1.5, 1.5, 1],
            tips=False,
            axis_config={"stroke_width": 4},
        ).scale(0.9).next_to(top_axes, DOWN, buff=1.5)

        bottom_axes.get_x_axis().add_labels({
            -2*PI: MathTex(r"-2\pi").set_stroke(width=1.2),
            2*PI: MathTex(r"2\pi").set_stroke(width=1.2),
        })
        bottom_axes.get_y_axis().add_labels({
            -1: MathTex("-1").set_stroke(width=1.2),
            0: MathTex("0").set_stroke(width=1.2),
            1: MathTex("1").set_stroke(width=1.2),
        })

        self.play(Create(top_axes))
        self.play(Create(bottom_axes))

        sin_func = lambda x: np.sin(x)
        cos_func = lambda x: np.cos(x)

        x_tracker = ValueTracker(-2 * PI)

        sin_graph = always_redraw(
            lambda: top_axes.plot(
                sin_func,
                x_range=[-2 * PI, x_tracker.get_value()],
                color=BLUE,
                stroke_width=6
            )
        )
        cos_graph = always_redraw(
            lambda: bottom_axes.plot(
                cos_func,
                x_range=[-2 * PI, x_tracker.get_value()],
                color=BLUE_D,
                stroke_width=6
            )
        )

        sin_dot = always_redraw(
            lambda: Dot(
                top_axes.c2p(x_tracker.get_value(), sin_func(x_tracker.get_value())),
                color=WHITE,
                radius=0.1
            )
        )
        cos_dot = always_redraw(
            lambda: Dot(
                bottom_axes.c2p(x_tracker.get_value(), cos_func(x_tracker.get_value())),
                color=WHITE,
                radius=0.1
            )
        )

        vertical_line = always_redraw(
            lambda: Line(
                start=sin_dot.get_center(),
                end=cos_dot.get_center(),
                color=PURPLE,
                stroke_width=6
            )
        )

        tangent_line = always_redraw(
            lambda: self.get_tangent_line(
                x_tracker.get_value(),
                sin_func,
                cos_func,
                top_axes,
                length=3,
                color=DARK_BLUE,
                stroke_width=6
            )
        )

        self.play(Create(sin_graph), Create(cos_graph),
                  Create(vertical_line), FadeIn(sin_dot), FadeIn(cos_dot),
                  Create(tangent_line))
        self.play(x_tracker.animate.set_value(2 * PI), run_time=8, rate_func=linear)
        self.wait(1)

        equation = MathTex(r"\frac{d}{dx}\sin(x) = \cos(x)").scale(1.2)
        equation.set_stroke(width=1.2)
        equation.set_color_by_gradient(BLUE, PURPLE)
        box = SurroundingRectangle(equation, buff=0.5, color=WHITE)

        self.play(
            FadeOut(title),
            FadeOut(top_axes),
            FadeOut(bottom_axes),
            FadeOut(sin_graph),
            FadeOut(cos_graph),
            FadeOut(sin_dot),
            FadeOut(cos_dot),
            FadeOut(vertical_line),
            FadeOut(tangent_line),
            FadeIn(equation, shift=DOWN)
        )
        self.wait(1)
        self.play(Create(box))

    def get_tangent_line(self, x_val, func, derivative, axes, length=3, color=GREEN, stroke_width=4):
        slope = derivative(x_val)
        y_val = func(x_val)
        dx = length / 2
        x1, x2 = x_val - dx, x_val + dx
        y1 = y_val + slope * (x1 - x_val)
        y2 = y_val + slope * (x2 - x_val)

        return Line(
            axes.c2p(x1, y1),
            axes.c2p(x2, y2),
            color=color,
            stroke_width=stroke_width
        )
